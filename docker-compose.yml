version: "3.7"

services:
  postgres:
    image: postgres:14
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-enterprise-kafka:5.5.3
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9991
    ports:
      - "9092:9092"


  redpanda-console:
    image: docker.redpanda.com/redpandadata/console:v3.1.3
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_BROKERS: kafka:29092

  kafka-init:
    image: confluentinc/cp-kafka:5.5.3
    depends_on:
      - kafka
    volumes:
      - ./scripts:/scripts
    entrypoint: ["/bin/bash", "/scripts/create_topics.sh"]

  prisma-migrate:
    image: node:18-alpine
    depends_on:
      - postgres
    working_dir: /app
    volumes:
      - ./:/app
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/postgres
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "
      apk add --no-cache postgresql-client && \
      echo 'Esperando Postgres...'; \
      until pg_isready -h postgres -p 5432 -U postgres; do \
        echo 'Postgres no listo, esperando 2s...'; \
        sleep 2; \
      done; \
      echo 'Aplicando migraciones Prisma...'; \
      npx prisma migrate deploy; \
      echo 'Migraciones aplicadas.'; \
      echo 'Insertando data base...'; \
      PGPASSWORD=postgres psql -h postgres -U postgres -d postgres -f /app/prisma/init-data.sql; \
      echo 'Data base insertada.'; 
      "

  emit-transaction:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - postgres
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/postgres
      KAFKA_BROKERS: kafka:29092
    command: ["npm", "run", "start:emit-transaction"]
    working_dir: /app
    ports:
      - "3000:3000"


  create-transaction:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - postgres
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/postgres
      KAFKA_BROKERS: kafka:29092
    command: ["npm", "run", "start:create-transaction"]
    volumes:
      - ./:/app
    working_dir: /app

  fraud-validator:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - postgres
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/postgres
      KAFKA_BROKERS: kafka:29092
    command: ["npm", "run", "start:fraud-validator"]
    volumes:
      - ./:/app
    working_dir: /app

  fraud-validator-update:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - postgres
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/postgres
      KAFKA_BROKERS: kafka:29092
    command: ["npm", "run", "start:fraud-validator-update"]
    volumes:
      - ./:/app
    working_dir: /app
